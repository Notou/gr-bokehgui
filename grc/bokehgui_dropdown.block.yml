# auto-generated by grc.converter

id: variable_bokehgui_dropdown
label: Bokeh GUI Dropdown
category: '[Bokeh GUI]/Bokeh GUI Widgets'
flags:
- show_id

parameters:
-   id: type
    label: Type
    dtype: enum
    default: bool
    options: [real, int, string, bool, raw]
    option_labels: [Float, Integer, String, Boolean, Any]
    option_attributes:
        conv: [float, int, str, bool, eval]
        str: [str, str, str, str, repr]
    hide: part
-   id: label
    dtype: string
    default: "Dropdown Menu"
-   id: set_dim
    label: Set Dimensions
    dtype: enum
    default: 'False'
    options: ['0', '1']
    option_labels: ['False', 'True']
-   id: width
    label: Width (pixels)
    dtype: real
    default: 0
    hide: ${ ('none' if int(set_dim) > 0 else 'all') }
-   id: height
    label: Height (pixels)
    dtype: real
    default: 0
    hide: ${ ('none' if int(set_dim) > 0 else 'all') }
-   id: num_opts
    label: Number of options
    dtype: enum
    default: '3'
    options: ['0', '1', '2', '3', '4', '5']
    option_labels: [List, '1', '2', '3', '4', '5']
-   id: value
    label: Default Value
    dtype: ${ type }
    default: ''
-   id: def_label
    label: Default Label
    dtype: string
-   id: options
    label: Values
    dtype: raw
    default: '[0, 1, 2]'
    hide: ${ ('all' if int(num_opts) else 'none') }
-   id: labels
    label: Labels
    dtype: raw
    default: '[]'
    hide: ${ ('all' if int(num_opts) else 'none') }
-   id: option0
    label: Option 0
    dtype: ${ type }
    default: '0'
    hide: ${ ('none' if int(num_opts) > 0 else 'all') }
-   id: label0
    label: Label 0
    dtype: string
    hide: ${ (int(num_opts) > 0) and (label0 and 'none' or 'part') or 'all' }
-   id: option1
    label: Option 1
    dtype: ${ type }
    default: '1'
    hide: ${ ('none' if int(num_opts) > 1 else 'all') }
-   id: label1
    label: Label 1
    dtype: string
    hide: ${ (int(num_opts) > 1) and (label1 and 'none' or 'part') or 'all' }
-   id: option2
    label: Option 2
    dtype: ${ type }
    default: '2'
    hide: ${ ('none' if int(num_opts) > 2 else 'all') }
-   id: label2
    label: Label 2
    dtype: string
    hide: ${ (int(num_opts) > 2) and (label2 and 'none' or 'part') or 'all' }
-   id: option3
    label: Option 3
    dtype: ${ type }
    default: '3'
    hide: ${ ('none' if int(num_opts) > 3 else 'all') }
-   id: label3
    label: Label 3
    dtype: string
    hide: ${ (int(num_opts) > 3) and (label3 and 'none' or 'part') or 'all' }
-   id: option4
    label: Option 4
    dtype: ${ type }
    default: '4'
    hide: ${ ('none' if int(num_opts) > 4 else 'all') }
-   id: label4
    label: Label 4
    dtype: string
    hide: ${ (int(num_opts) > 4) and (label4 and 'none' or 'part') or 'all' }
value: ${ value }

templates:
    imports: import bokehgui
    var_make: self.${id} = ${id} = ${value}
    make: |+
      ########################################################################
      ## Create the options list
      ########################################################################
      % if int(num_opts):
      self._${id}_options = [\
        %for ch in [option0, option1, option2, option3, option4][:int(num_opts())]:
          ${ch}, \
        % endfor
        ]
      % else:
      self._${id}_options = ${options}
      % endif
      ########################################################################
      ## Create the labels list
      ########################################################################
      % if int(num_opts):
      self._${id}_labels = [\
        % for i, lbl in enumerate([label0, label1, label2, label3, label4][:int(num_opts())]):
          % if lbl:
            ${lbl},\
          % else:
            str(self._${id}_options[${i}]),\
          % endif
        % endfor
        ]
      % elif labels:
      self._${id}_labels = ${labels}
      % else:
      self._${id}_labels = map(str, self._${id}_options)
      % endif
      
      
      % if int(num_opts):
      self._${id}_dict = {}
      % for i, lbl in enumerate([label0, label1, label2, label3, label4][:int(num_opts())]):
      % if lbl:
      self._${id}_dict[${lbl}] = self._${id}_options[${i}]
      %endif
      % endfor
      % elif labels:
        <%
         dict = {}
         for ind in range(0, len(context.get('options')())):
            dict[str(context.get('labels')()[ind])] = context.get('options')()[ind]
         %> 
      self._${id}_dict = ${dict}
      % endif
      % if int(set_dim):
      self._${id}_width = ${width}
      self._${id}_height = ${height}
      % else:
      self._${id}_width = 0
      self._${id}_height = 0
      % endif
      self.${id}_dropdown = bokehgui.dropdown(self.widget_lst, title=${label}, value = ${def_label}, options=self._${id}_labels, 
                                                   width = self._${id}_width, height = self._${id}_height)
      self.${id}_dropdown.add_callback(lambda attr, old, new: self.set_${id}(self._${id}_dict[new]))

    callbacks:
    - self.set_${id}(${value})
    - self.${id}_dropdown.set_value(${value})
    - self.${id}_dropdown.set_label(${value})

file_format: 1
